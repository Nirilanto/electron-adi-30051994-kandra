// Enregistrez ce script sous le nom build-portable.js √† la racine du projet

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// D√©finition des chemins
const rootDir = __dirname;
const distDir = path.join(rootDir, 'dist');
const assetsDir = path.join(rootDir, 'assets');
const templatesDir = path.join(rootDir, 'templates');

// Cr√©er les dossiers n√©cessaires s'ils n'existent pas
function createDirectories() {
  console.log('üîß Cr√©ation des dossiers n√©cessaires...');
  
  if (!fs.existsSync(assetsDir)) {
    fs.mkdirSync(assetsDir, { recursive: true });
    console.log('‚úÖ Dossier assets cr√©√©');
  }
  
  if (!fs.existsSync(templatesDir)) {
    fs.mkdirSync(templatesDir, { recursive: true });
    console.log('‚úÖ Dossier templates cr√©√©');
  }
  
  if (!fs.existsSync(path.join(templatesDir, 'contracts'))) {
    fs.mkdirSync(path.join(templatesDir, 'contracts'), { recursive: true });
    console.log('‚úÖ Dossier templates/contracts cr√©√©');
  }
  
  if (!fs.existsSync(path.join(templatesDir, 'certificates'))) {
    fs.mkdirSync(path.join(templatesDir, 'certificates'), { recursive: true });
    console.log('‚úÖ Dossier templates/certificates cr√©√©');
  }
}

// Cr√©er ou mettre √† jour le fichier portable.txt
function createPortableMarker() {
  console.log('üîß Cr√©ation du marqueur de mode portable...');
  
  const portableTxtContent = `Cette application s'ex√©cute en mode portable.
Toutes les donn√©es sont stock√©es localement dans le dossier "data" situ√© au m√™me emplacement que l'ex√©cutable.
Ne pas supprimer ce fichier, sinon l'application ne fonctionnera pas correctement en mode portable.`;
  
  fs.writeFileSync(path.join(rootDir, 'portable.txt'), portableTxtContent);
  console.log('‚úÖ Fichier portable.txt cr√©√©');
}

// Cr√©er les fichiers de templates HTML si n√©cessaire
function createTemplateFiles() {
  console.log('üîß Cr√©ation des fichiers de templates HTML...');
  
  // R√©cup√©rer les templates depuis main.js
  let mainJsContent;
  try {
    mainJsContent = fs.readFileSync(path.join(rootDir, 'main.js'), 'utf8');
  } catch (error) {
    console.error('‚ùå Impossible de lire main.js:', error.message);
    return;
  }
  
  // Extraire le template de contrat
  const contractTemplateMatch = mainJsContent.match(/function getContractTemplate\(\) \{[\s\S]*?return `([\s\S]*?)`;[\s\S]*?\}/);
  if (contractTemplateMatch && contractTemplateMatch[1]) {
    fs.writeFileSync(path.join(templatesDir, 'contracts', 'default.html'), contractTemplateMatch[1].trim());
    console.log('‚úÖ Template de contrat cr√©√©');
  } else {
    console.warn('‚ö†Ô∏è Template de contrat non trouv√© dans main.js');
  }
  
  // Extraire le template de certificat
  const certificateTemplateMatch = mainJsContent.match(/function getCertificateTemplate\(\) \{[\s\S]*?return `([\s\S]*?)`;[\s\S]*?\}/);
  if (certificateTemplateMatch && certificateTemplateMatch[1]) {
    fs.writeFileSync(path.join(templatesDir, 'certificates', 'default.html'), certificateTemplateMatch[1].trim());
    console.log('‚úÖ Template de certificat cr√©√©');
  } else {
    console.warn('‚ö†Ô∏è Template de certificat non trouv√© dans main.js');
  }
}

// Cr√©er une ic√¥ne par d√©faut si n√©cessaire
function createDefaultIcon() {
  console.log('üîß V√©rification de l\'ic√¥ne...');
  
  const iconPath = path.join(assetsDir, 'icon.ico');
  if (!fs.existsSync(iconPath)) {
    console.log('‚ö†Ô∏è Aucune ic√¥ne trouv√©e, cr√©ation d\'une ic√¥ne par d√©faut...');
    // Remarque: Dans un cas r√©el, vous devriez avoir une ic√¥ne .ico
    // Cette √©tape est symbolique pour le script
    console.log('‚ÑπÔ∏è Veuillez fournir une ic√¥ne dans le dossier assets/ nomm√©e icon.ico');
  } else {
    console.log('‚úÖ Ic√¥ne trouv√©e');
  }
}

// Construire l'application
function buildApp() {
  console.log('üî® Construction de l\'application React...');
  try {
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Construction React termin√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la construction React:', error.message);
    process.exit(1);
  }
  
  console.log('üì¶ Cr√©ation de l\'ex√©cutable portable...');
  try {
    // Utiliser npx pour s'assurer que electron-builder est correctement appel√©
    execSync('npx electron-builder --win portable', { stdio: 'inherit' });
    console.log('‚úÖ Ex√©cutable portable cr√©√©');
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'ex√©cutable:', error.message);
    process.exit(1);
  }
}

// Informations post-compilation
function showCompletionInfo() {
  console.log('\nüéâ Construction termin√©e!');
  console.log('üìÇ L\'ex√©cutable portable se trouve dans:', path.join(distDir, 'win-unpacked'));
  console.log('üìÑ Fichier ex√©cutable:', path.join(distDir, 'ContratManager.exe'));
  console.log('\nPour utiliser l\'application en mode portable:');
  console.log('1. Copiez ContratManager.exe sur votre cl√© USB');
  console.log('2. Copiez le fichier portable.txt √† c√¥t√© de l\'ex√©cutable');
  console.log('3. Lancez l\'application depuis la cl√© USB');
  console.log('\nUn dossier "data" sera cr√©√© automatiquement pour stocker vos donn√©es.');
}

// Ex√©cution principale
function main() {
  console.log('üöÄ D√©but de la construction de l\'application portable...');
  
  createDirectories();
  createPortableMarker();
  createTemplateFiles();
  createDefaultIcon();
  buildApp();
  showCompletionInfo();
}

main();